import logging
from uuid import uuid4
from telegram import Update, LabeledPrice
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    PreCheckoutQueryHandler,
    filters,
)
from flask import Flask
import threading
import asyncio

# üîê –ó–∞–º–µ–Ω–∏—Ç–µ —Å–≤–æ–∏–º–∏ —Ç–æ–∫–µ–Ω–∞–º–∏
TOKEN = "7860845577:AAEGZ_nPLGSRDXOwadzdgJGe20kKT_ZtCIY"
PROVIDER_TOKEN = "6618536796:TEST:545158"

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render
flask_app = Flask(__name__)

@flask_app.route("/")
def index():
    return "OK"

def run_flask():
    flask_app.run(host="0.0.0.0", port=8000)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–≤–µ–¥–∏—Ç–µ /pay —á—Ç–æ–±—ã –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ FreedomPay.")

# –ö–æ–º–∞–Ω–¥–∞ /pay
async def pay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payload = f"freedompay-test-{uuid4()}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π payload
    prices = [LabeledPrice("–¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä", 1000 * 100)]  # 1000 —Å–æ–º–æ–≤
    await context.bot.send_invoice(
        chat_id=update.effective_chat.id,
        title="FreedomPay –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞",
        description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ FreedomPay",
        payload=payload,
        provider_token=PROVIDER_TOKEN,
        currency="KGS",
        prices=prices,
        need_name=True,
        is_flexible=False,
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ pre-checkout
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    if not query.invoice_payload.startswith("freedompay-test-"):
        await query.answer(ok=False, error_message="–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ payload.")
    else:
        await query.answer(ok=True)
        logger.info("PreCheckout –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã
async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    flask_thread = threading.Thread(target=run_flask)
    flask_thread.start()

    # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("pay", pay))
    application.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    application.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

    await application.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
